name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        try:
            from portfolio_optimizer import PortfolioOptimizer
            from robust_data_fetcher import RobustDataFetcher
            print('‚úÖ Core modules import successfully')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        
        try:
            import streamlit as st
            import pandas as pd
            import numpy as np
            import plotly.graph_objects as go
            import plotly.express as px
            print('‚úÖ All dependencies available')
        except ImportError as e:
            print(f'‚ùå Dependency error: {e}')
            sys.exit(1)
        "
    
    - name: Test data fetcher initialization
      run: |
        python -c "
        from robust_data_fetcher import RobustDataFetcher
        fetcher = RobustDataFetcher()
        print(f'‚úÖ Data fetcher initialized with {len(fetcher.crypto_symbols)} symbols')
        print(f'Symbols: {fetcher.crypto_symbols[:5]}...')
        "
    
    - name: Test portfolio optimizer initialization
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from portfolio_optimizer import PortfolioOptimizer
        
        # Create sample data
        dates = pd.date_range('2023-01-01', periods=100, freq='D')
        returns = pd.DataFrame(
            np.random.randn(100, 3) * 0.02,
            index=dates,
            columns=['BTC-USD', 'ETH-USD', 'SOL-USD']
        )
        
        optimizer = PortfolioOptimizer(returns)
        print(f'‚úÖ Portfolio optimizer initialized with {optimizer.n_assets} assets')
        "
    
    - name: Validate configuration files
      run: |
        python -c "
        import os
        import json
        
        # Check if requirements.txt exists
        if os.path.exists('requirements.txt'):
            print('‚úÖ requirements.txt found')
        else:
            print('‚ùå requirements.txt missing')
        
        # Check if README.md exists
        if os.path.exists('README.md'):
            print('‚úÖ README.md found')
        else:
            print('‚ùå README.md missing')
        
        # Check main application file
        if os.path.exists('frontend/app.py'):
            print('‚úÖ Main application file found')
        else:
            print('‚ùå frontend/app.py missing')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build check
      run: |
        echo "‚úÖ Build completed successfully"
        echo "üì¶ Package structure:"
        find . -name "*.py" | head -10
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: crypto-portfolio-app
        path: |
          frontend/
          *.py
          requirements.txt
          README.md
        retention-days: 7